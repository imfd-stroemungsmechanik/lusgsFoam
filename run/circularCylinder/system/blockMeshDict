/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2006                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Radius of cylinder (r0) and farfield (r1)
r0  0.5;
r1 50;

// Number of cells in radial (nr) and circumferential direction (nc)
nr 100;
nc 25;

// Grading in radial direction
gr 500;

// Additional point on circle
p0 #eval{ 0.5*sqrt(2)*$r0 };
p1 #eval{ 0.5*sqrt(2)*$r1 };

scale   1;

vertices
(
    // 1st block
    (#eval{ $r0 }    0              0)
    (0               #eval{ $r0 }   0)
    (0               #eval{ $r1 }   0)
    (#eval{ $r1 }    0              0)
    (#eval{ $r0 }    0              -1)
    (0               #eval{ $r0 }   -1)
    (0               #eval{ $r1 }   -1)
    (#eval{ $r1 }    0              -1)
    // 2nd block
    (#eval{ -$r0 }   0              0)
    (#eval{ -$r1 }   0              0)
    (#eval{ -$r0 }   0              -1)
    (#eval{ -$r1 }   0              -1)
    // 3rd and 4th block
    (0               #eval{ -$r0 }   0)
    (0               #eval{ -$r1 }   0)
    (0               #eval{ -$r0 }   -1)
    (0               #eval{ -$r1 }   -1)
);

blocks
(
    hex (0 1 2 3 4 5 6 7) ($nc $nr 1) simpleGrading (1 $gr 1)
    hex (1 8 9 2 5 10 11 6) ($nc $nr 1) simpleGrading (1 $gr 1)
    hex (8 12 13 9 10 14 15 11) ($nc $nr 1) simpleGrading (1 $gr 1)
    hex (12 0 3 13 14 4 7 15) ($nc $nr 1) simpleGrading (1 $gr 1)
);

edges
(
    // 1st block
    arc 0 1 ($p0 $p0 0)
    arc 4 5 ($p0 $p0 -1)
    arc 2 3 ($p1 $p1 0)
    arc 6 7 ($p1 $p1 -1)
    // 2nd block
    arc 1 8 (#eval{-$p0} #eval{$p0} 0)
    arc 5 10 (#eval{-$p0} #eval{$p0} -1)
    arc 2 9 (#eval{-$p1} #eval{$p1} 0)
    arc 6 11 (#eval{-$p1} #eval{$p1} -1)
    // 3rd block
    arc 8 12 (#eval{-$p0} #eval{-$p0} 0)
    arc 10 14 (#eval{-$p0} #eval{-$p0} -1)
    arc 9 13 (#eval{-$p1} #eval{-$p1} 0)
    arc 11 15 (#eval{-$p1} #eval{-$p1} -1)
    // 4th block
    arc 12 0 (#eval{$p0} #eval{-$p0} 0)
    arc 14 4 (#eval{$p0} #eval{-$p0} -1)
    arc 13 3 (#eval{$p1} #eval{-$p1} 0)
    arc 15 7 (#eval{$p1} #eval{-$p1} -1)
);

boundary
(
    farfield
    {
        type patch;
        faces
        (
            (2 3 6 7)
            (2 6 9 11)
            (9 11 13 15)
            (13 15 3 7)
        );
    }
    cylinder
    {
        type patch;
        faces
        (
            (0 1 4 5)
            (1 5 8 10)
            (8 10 12 14)
            (12 14 0 4)
        );
    }
/*
    inlet
    {
        type patch;
        faces
        (
            (0 3 4 7)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (12 13 14 15)
        );
    }
    walls
    {
        type wall;
        faces
        (
            (0 1 4 5)
            (2 3 6 7)
            (1 5 8 10)
            (2 6 9 11)
            (8 10 12 14)
            (9 11 13 15)
        );
    }
    frontAndBack
    {
        type empty;
        faces
        (
            (0 1 2 3)
            (4 5 6 7)
            (1 2 8 9) 
            (5 6 10 11)
            (8 9 12 13)
            (10 11 14 15)
        );
    }
*/
);

mergePatchPairs
(
);

// ************************************************************************* //
